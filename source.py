#!/usr/bin/env python
# -*- coding: utf-8 -*-
# generated by wxGlade 0.6.3 on Fri Oct 15 18:01:02 2010

import wx, locale
from datetime import datetime
import os, subprocess
import xml.etree.cElementTree as ElementTree

# begin wxGlade: extracode
# end wxGlade

curdir = ""  # Use  filename as a flag
palavras=[]

if locale.getdefaultlocale()[0]=='pt_BR' or locale.getdefaultlocale()[0]=='pt':
    palavras.append(u"Novinho")
    palavras.append(u"Tempo de Permanência da imagem (segundos):")
    palavras.append(u"Tempo de duração da transição (segundos):")
    palavras.append(u"Formatos que deseja incluir:")
    palavras.append("png;jpg;tif")
    palavras.append(u"Selecione a pasta")
    palavras.append(u"Gerar Plano de Fundo!")
    palavras.append(u"Este Programa tem como finalidade facilitar a criação de Planos de Fundo no Gnome.\nVersão: 0.4\nUtilizado código de Francisco Souza e modificado por Diogo Munaro Vieira.\n\nPara mais informações: http://www.franciscosouza.net     Ou: diogo.mvieira@ig.com.br\n\nEspero que gostem!")
    palavras.append(u"Nome do Conjunto de imagens que será gerado:")
    palavras.append(u"Selecionar")
    palavras.append(u"Sobre")
    palavras.append(u"Erro!")
    palavras.append(u"Sucesso!")
    palavras.append(u"Escolha a pasta aonde estão as imagens:")
    palavras.append(u"Pasta Vazia")
    palavras.append(u"Complete todos os campos corretamente antes de continuar!")
    palavras.append(u'Formato de tipo de arquivo incorreto\nOu: jpg;png;tif (mais de um)\nOu: png (somente um)\nVerifique se é esse o formato\nque gostaria na caixa aonde tinha\ndigitado o errado.')
    palavras.append(u'Formato de tipo de arquivo incorreto\nOu: jpg;png;tif (mais de um)\nOu: png (somente um)')
    palavras.append(u"Pasta protegida contra gravação!\nProcesso abortado.")
    palavras.append(u"Plano de fundo trocado e\nutilizado com Sucesso!\nPara remover ou trocar acesse\nSistema>Preferências>Aparência>Plano de Fundo\n\nNão remova o arquivo xml criado na pasta das\nimagens e nem as imagens")
    palavras.append(u"gconftool-2 não instalado ou arquivo não encontrado.")
    palavras.append(u"Selecione a pasta primeiro!")
    palavras.append(u'Arquivos no(s) formato(s)\n')
    palavras.append(u'\nnão existem na pasta de origem,\ne não serão incluidos.') 
    palavras.append(u'Aviso')
    palavras.append(u"Criando Papel de Parede...")
    palavras.append(u"Iniciando...")
    palavras.append(u"Verificando dados...")
    palavras.append(u"Pegando imagens...")
    palavras.append(u"Escrevendo xml...")
    palavras.append(u"Executando Gconf...")
    palavras.append(u'O que faremos?')
    palavras.append(u'Deseja copiar dos\nsubdiretórios também?')    
    palavras.append(u'Algumas extensões de arquivos podiam\nestar somente nos subdiretórios.')    

else:
    palavras.append(u"Newer")
    palavras.append(u"Image's permanency time (seconds):")
    palavras.append(u"Transition time (seconds):")
    palavras.append(u"Extensions to include:")
    palavras.append("png;jpg;tif")
    palavras.append(u"Select Folder")
    palavras.append(u"Generate Wallpaper!")
    palavras.append(u"This program aims to facilitate the creation of the Gnome Wallpapers.\nVersion: 0.4\nUsing part of Francisco Souza's code modified by Diogo Munaro Vieira.\n\nFor futher information: http://www.franciscosouza.net     Or: diogo.mvieira@ig.com.br\n\nEnjoy!")
    palavras.append(u"Image's group name that will be generated:")
    palavras.append(u"Select")
    palavras.append(u"About")
    palavras.append(u"Error!")
    palavras.append(u"Sucess!")
    palavras.append(u"Choose the folder where images are:")
    palavras.append(u"Empty Folder")
    palavras.append(u"Complete correctly all the fields!")
    palavras.append(u'Incorrect file type written\nOr: jpg;png;tif (more than one)\nOr: png (only one)\nVerify if now is right.')
    palavras.append(u'Incorrect file type written\nOr: jpg;png;tif (more than one)\nOr: png (only one)')
    palavras.append(u"Folder write protected!\nProcess aborted.")
    palavras.append(u"Wallpaper changed and\nSucess applied!\nTo change or remove acess:\nSystem>Preferences>Appearance>Background\n\nDon't remove the xml file created on\nimages folder, neither the images")
    palavras.append(u"gconftool-2 not installed or file not found.")
    palavras.append(u"Select the folder first!")
    palavras.append(u'Type file(s)\n')
    palavras.append(u"\ndoesn't exist in the source folder,\nand doesn't be included.") 
    palavras.append(u'Warning') 
    palavras.append(u"Creating Wallpaper...")
    palavras.append(u"Starting...")
    palavras.append(u"Looking for errors...")
    palavras.append(u"Looking images...")
    palavras.append(u"Writing xml...")
    palavras.append(u"Running Gconf...")
    palavras.append(u'And Now?')
    palavras.append(u'Want to copy the subdirectories as well?')    
    palavras.append(u'Some file extensions could only be in subdirectories.')
    
class inicio(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: inicio.__init__
        kwds["style"] = wx.ICONIZE|wx.CAPTION|wx.MINIMIZE|wx.CLOSE_BOX|wx.MINIMIZE_BOX|wx.SYSTEM_MENU|wx.CLIP_CHILDREN
        wx.Frame.__init__(self, *args, **kwds)
        self.notebook_1 = wx.Notebook(self, -1, style=0)
        self.notebook_1_pane_2 = wx.Panel(self.notebook_1, -1)
        self.notebook_1_pane_1 = wx.Panel(self.notebook_1, -1)
        self.text_ctrl_1 = wx.TextCtrl(self.notebook_1_pane_1, -1, palavras[0], style=wx.TE_CENTRE)
        self.label_3 = wx.StaticText(self.notebook_1_pane_1, -1, palavras[1])
        self.text_ctrl_2 = wx.TextCtrl(self.notebook_1_pane_1, -1, "895")
        self.label_4 = wx.StaticText(self.notebook_1_pane_1, -1, palavras[2])
        self.text_ctrl_3 = wx.TextCtrl(self.notebook_1_pane_1, -1, "5")
        self.label_5 = wx.StaticText(self.notebook_1_pane_1, -1, palavras[3])
        self.text_ctrl_4 = wx.TextCtrl(self.notebook_1_pane_1, -1, palavras[4])      
        self.button_1 = wx.Button(self.notebook_1_pane_1, -1, palavras[5])
        self.button_2 = wx.Button(self.notebook_1_pane_1, -1, palavras[6])        
        self.label_1 = wx.StaticText(self.notebook_1_pane_2, -1, palavras[7])

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.OnOpenFileDialogButton, self.button_1)
        self.Bind(wx.EVT_BUTTON, self.Gerar, self.button_2)        
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: inicio.__set_properties
        self.SetTitle("TG_GUI")
        _icon = wx.EmptyIcon()
        self.text_ctrl_1.SetMinSize((100, 27))
        self.text_ctrl_1.SetFocus()
        self.text_ctrl_2.SetMinSize((50, 27))
        self.text_ctrl_3.SetMinSize((50, 27))
        self.text_ctrl_4.SetMinSize((100, 27))        
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: inicio.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_3 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_2 = wx.FlexGridSizer(5, 2, 0, 0)
        label_2 = wx.StaticText(self.notebook_1_pane_1, -1, palavras[8])
        sizer_2.Add(label_2, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_2.Add(self.text_ctrl_1, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_2.Add(self.label_3, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_2.Add(self.text_ctrl_2, 0, 0, 0)
        sizer_2.Add(self.label_4, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_2.Add(self.text_ctrl_3, 0, 0, 0)
        sizer_2.Add(self.label_5, 0, wx.ALIGN_CENTER_VERTICAL, 0)        
        sizer_2.Add(self.text_ctrl_4, 0, 0, 0)        
        sizer_2.Add(self.button_1, 0, 0, 1)
        sizer_2.Add(self.button_2, 0, 0, 1)        
        self.notebook_1_pane_1.SetSizer(sizer_2)
        sizer_3.Add(self.label_1, 0, 0, 0)
        self.notebook_1_pane_2.SetSizer(sizer_3)
        self.notebook_1.AddPage(self.notebook_1_pane_1, palavras[9])
        self.notebook_1.AddPage(self.notebook_1_pane_2, palavras[10])
        sizer_1.Add(self.notebook_1, 1, wx.ALL|wx.EXPAND|wx.ALIGN_CENTER_VERTICAL, 1)
        self.SetSizer(sizer_1)
        sizer_1.Fit(self)
        self.Layout()
        self.Centre()
        # end wxGlade

    def Erro(self,texto):
        return Exception(wx.MessageBox(texto, palavras[11], wx.OK | wx.ICON_ERROR))             
        
    def Pergunta(self, texto):
        return wx.MessageBox(texto, palavras[31], wx.YES_NO | wx.NO_DEFAULT | wx.ICON_QUESTION)
    
    def Sucesso(self,texto):
        wx.MessageBox(texto, palavras[12], wx.OK)

    def Aviso(self, texto):
        wx.MessageBox(texto, palavras[24], wx.OK | wx.ICON_EXCLAMATION)

    def OnOpenFileDialogButton(self, event): # wxGlade: inicio.<event_handler>
        global curdir
        dlg = wx.DirDialog(self, message= palavras[13])
 
        if dlg.ShowModal() == wx.ID_OK:
            
            # get the new filename from the dialog
            curdir = dlg.GetPath()
            oqtem=''
            tree = os.walk(curdir)
            for root, dirs, files in tree:
                for file in files:
                    if ((os.path.splitext(root+os.sep+file)[1]).replace('.','')).lower() not in oqtem:
                        oqtem = oqtem+(os.path.splitext(root+os.sep+file)[1].replace('.','')).lower()+';'
            self.text_ctrl_4.SetValue(oqtem[:-1])
            if oqtem[:-1]=="":
                return self.Erro(palavras[14])
        else:
            return Exception()          

        dlg.Destroy()  # best to do this sooner than later
            

    def Gerar(self, event):
        max=5
        dialog = wx.ProgressDialog(palavras[25],palavras[26], max,style = wx.PD_AUTO_HIDE)
        dialog.Centre()
        dialog.SetMinSize((200, 100))        
        images, ntem=[],[]
        global curdir
        if self.text_ctrl_1.GetValue()=="" or self.text_ctrl_2.GetValue()=="" or self.text_ctrl_3.GetValue()=="" or self.text_ctrl_4.GetValue() == "":
            dialog.Update(max,palavras[20])
            dialog.Fit()
            dialog.Destroy()
            return self.Erro(palavras[15])
        elif curdir != "": # verifica se diretorio existe
            # adicionar elementos da arvore
            itens=[]
            today = datetime.now()
            subdir=self.Pergunta(palavras[32])
            if subdir==wx.YES:
                tree = os.walk(curdir)
                for root, dirs, files in tree:
                    for file in files:
                        itens+=[root+os.sep+file]
            else:
                for item in os.listdir(curdir):
                    itens+=[curdir+os.sep+item]
                self.Aviso(palavras[33])            
            root = ElementTree.Element('background')
            time_info = ElementTree.SubElement(root, 'starttime')
            year = ElementTree.SubElement(time_info, 'year')
            year.text = str(today.year)
            month = ElementTree.SubElement(time_info, 'month')
            month.text = str(today.month)
            day = ElementTree.SubElement(time_info, 'day')
            day.text = str(today.day)
            hour = ElementTree.SubElement(time_info, 'hour')
            hour.text = str(today.hour)
            minute = ElementTree.SubElement(time_info, 'minute')
            minute.text = str(today.minute)
            second = ElementTree.SubElement(time_info, 'second')
            second.text = str(today.second)
            #pegar somente alguns tipos de imagem da pasta
            ext=self.text_ctrl_4.GetValue()
            dialog.Update(1,palavras[27])
            dialog.Fit()
            if ext[-1]==';':
                dialog.Update(max,palavras[20])
                dialog.Fit()
                dialog.Destroy()
                self.text_ctrl_4.SetValue(ext[:-1])
                return self.Erro(palavras[16])

            if '.' in ext:
                dialog.Update(max,palavras[20])
                dialog.Fit()
                dialog.Destroy()              
                self.text_ctrl_4.SetValue(ext.replace('.',''))
                return self.Erro(palavras[16])

            if ';' in ext and ext[-1]!=';' and ext[0]!=';' and '.' not in ext:
                while ';' in ext:
                    b=len(images)
                    images += [item for item in itens if (item.lower().endswith('.'+ext[:ext.index(';')]) or item.upper().endswith('.'+ext[:ext.index(';')]))]
                    if b==len(images):
                        ntem += [ext[:ext.index(';')]]
                    ext=ext[(ext.index(';')+1):]
                b=len(images)
                images += [item for item in itens if (item.lower().endswith('.'+ext) or item.upper().endswith('.'+ext))]
                if b==len(images):
                    ntem += [ext]

            elif ';' not in ext and '.' not in ext:
                images = [item for item in itens if (item.lower().endswith('.'+ext) or item.upper().endswith('.'+ext))]
           
            else:
                dialog.Update(max,palavras[20])
                dialog.Fit()
                dialog.Destroy()
                return self.Erro(palavras[17])
            try:
                int(self.text_ctrl_2.GetValue())
            except:
                dialog.Update(max,palavras[20])
                dialog.Fit()
                dialog.Destroy()
                self.text_ctrl_2.SetValue('')
                return self.Erro(palavras[15])
            try:
                int(self.text_ctrl_3.GetValue())
            except:
                self.text_ctrl_3.SetValue('')
                dialog.Update(max,palavras[20])
                dialog.Fit()
                dialog.Destroy()
                return self.Erro(palavras[15])

            if ntem!=[]:
                i=0
                stri=''  
                for i in range(len(ntem)):
                    stri+=ntem[i]+' / '
                self.Aviso(palavras[22]+stri+palavras[23])

            image_count = len(images) #escrever para cada imagem
            cur_index = 0
            dialog.Update(2,palavras[28])
            dialog.Fit()

            while cur_index < image_count:
                static = ElementTree.SubElement(root, 'static')
                duration = ElementTree.SubElement(static, 'duration')
                duration.text = self.text_ctrl_2.GetValue()
                image_file = ElementTree.SubElement(static, 'file')
                image_file.text = os.path.join(curdir, images[cur_index])
                transition = ElementTree.SubElement(root, 'transition')
                transition_duration = ElementTree.SubElement(transition, 'duration')
                transition_duration.text = self.text_ctrl_3.GetValue()
                from_file = ElementTree.SubElement(transition, 'from')
                from_file.text = os.path.join(curdir, images[cur_index])
                to_file = ElementTree.SubElement(transition, 'to')
                if (cur_index + 1 == image_count):
                    to_file.text = os.path.join(curdir, images[0])
                else:
                    to_file.text = os.path.join(curdir, images[cur_index + 1])
                cur_index += 1
                #colocar tudo no .xml
            dialog.Update(3,palavras[29])
            dialog.Fit()

            try:
                bg_file = open(curdir+'/'+self.text_ctrl_1.GetValue()+'.xml', 'w')
                ElementTree.ElementTree(root).write(bg_file)
                bg_file.close()
                dialog.Update(4,palavras[30])
                dialog.Fit()

            except:
                dialog.Update(max,palavras[20])
                dialog.Fit()
                dialog.Destroy()
                self.Erro(palavras[18])              

            try:# chamar gconf para adicionar .xml no sistema
                subprocess.call(['/usr/bin/gconftool-2','--type', 'string', '--set', '/desktop/gnome/background/picture_filename', os.path.join(curdir,self.text_ctrl_1.GetValue()+'.xml')])
                dialog.Update(max,palavras[30])
                dialog.Fit()
                dialog.Destroy()                
                self.Sucesso(palavras[19])
            except:
                dialog.Update(max,palavras[20])
                dialog.Fit()
                dialog.Destroy()
                self.Erro(palavras[20])

        else:
            dialog.Update(max,palavras[20])
            dialog.Fit()
            dialog.Destroy()
            return self.Erro(palavras[21])
        
# end of class inicio


if __name__ == "__main__":
    app = wx.PySimpleApp(0)
    wx.InitAllImageHandlers()
    frame_1 = inicio(None, -1, "")
    app.SetTopWindow(frame_1)
    frame_1.SetIcon(wx.Icon('/usr/share/icons/hicolor/48x48/apps/tggui.png',wx.BITMAP_TYPE_PNG))    
    frame_1.Show()
    app.MainLoop()


